{"version":3,"sources":["components/Home.component.jsx","components/Course.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Course","props","courseName","match","params","coursename","useState","courses","setCourses","useEffect","playListId","fetch","then","res","json","data","console","log","result","items","map","item","title","snippet","vid","contentDetails","videoId","setTiTle","setVid","counter","setCounter","width","height","src","frameborder","allowfullscreen","index","style","marginTop","key","href","fontWeight","cursor","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uPAiBeA,MAbf,WACI,OACI,yBAAKC,UAAU,QACX,kBAAC,IAAD,CAAMC,GAAG,YACL,yCAEJ,kBAAC,IAAD,CAAMA,GAAG,WACL,0C,eCqEDC,MA1Ef,SAAgBC,GACZ,IAAMC,EAAaD,EAAME,MAAMC,OAAOC,WADnB,EAGWC,mBAAS,IAHpB,mBAGZC,EAHY,KAGHC,EAHG,KAKnBC,qBAAU,WAEN,IAAIC,EAAa,GAEbA,EADe,YAAfR,EACa,qCAEA,qCAGjBS,MAAM,kHAAD,OAAmHD,EAAnH,iDACAE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZ,IAAMG,EAASH,EAAKI,MAAMC,KAAI,SAAAC,GAC1B,MAAO,CAAEC,MAAOD,EAAKE,QAAQD,MAAOE,IAAKH,EAAKI,eAAeC,YAEjEV,QAAQC,IAAIC,EAAQ,UACpBV,EAAWU,GACXS,EAAST,EAAO,GAAGI,OACnBM,EAAOV,EAAO,GAAGM,UAE1B,IA1BgB,MA4BOlB,mBAAS,IA5BhB,mBA4BZgB,EA5BY,KA4BLK,EA5BK,OA6BGrB,mBAAS,IA7BZ,mBA6BZkB,EA7BY,KA6BPI,EA7BO,OA8BWtB,mBAAS,GA9BpB,mBA8BZuB,EA9BY,KA8BHC,EA9BG,KAyCnB,OACI,yBAAKhC,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UAVnB,yBAAKA,UAAU,mBACX,4BAAQiC,MAAM,MAAMC,OAAO,MAAMC,IAAK,2BAA6BT,EAAM,SAAUU,YAAY,IAAIC,iBAAe,KAW9G,gCAAMb,KAGd,wBAAIxB,UAAU,cACV,yBAAKA,UAAU,OAEPS,EAAQa,KAAI,SAACC,EAAMe,GAAW,IAAD,EACzB,OACI,yBAAKtC,UAAU,SAEX,yBAAKA,UAAU,kBAAkBuC,MAAO,CAAEC,UAAW,UACjD,4BAAQP,MAAM,MAAMC,OAAO,MAAMC,IAAK,2BAA6BZ,EAAKG,IAAM,SAAUU,YAAY,OAExG,2BAAIK,IAAKH,EAAOI,KAAK,IAAIH,MAAO,CAAEI,WAAY,QAAU3C,UAAW+B,IAAYO,EAAQ,yBAA2B,mBAAlH,sBAA4I,CAAEM,OAAQ,YAAtJ,yBAA4K,WACxKf,EAASN,EAAKC,OACdM,EAAOP,EAAKG,KACZM,EAAWM,MAHf,GAIIf,EAAKC,e,MClD9BqB,MAXf,WACI,OACI,yBAAK7C,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO8C,OAAK,EAACC,KAAK,IAAIC,UAAWjD,IACjC,kBAAC,IAAD,CAAOgD,KAAK,eAAeC,UAAW9C,OCDlC+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS/C,MACvB,2DCZNgD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.4010d2da.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <Link to=\"/reactjs\" >\r\n                <h1> ReactJS</h1>\r\n            </Link>\r\n            <Link to=\"/nodejs\" >\r\n                <h1> NodeJS</h1>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n//https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=PLkY6Xj8Sg8-vV5kALCOT0LShKc6mVFBvW&key=[YOUR_API_KEY] \r\n\r\nfunction Course(props) {\r\n    const courseName = props.match.params.coursename;\r\n\r\n    const [courses, setCourses] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        let playListId = \"\"\r\n        if (courseName === 'reactjs') {\r\n            playListId = 'PLkY6Xj8Sg8-vV5kALCOT0LShKc6mVFBvW'\r\n        } else {\r\n            playListId = 'PLkY6Xj8Sg8-s-m-qFBQFoeNSfpCTBiwMU'\r\n        }\r\n\r\n        fetch(`https://youtube.googleapis.com/youtube/v3/playlistItems?part=snippet%2CcontentDetails&maxResults=25&playlistId=${playListId}&key=AIzaSyBO28gdEoriekku32-3fqnAiX4bLWefzp0`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                const result = data.items.map(item => {\r\n                    return { title: item.snippet.title, vid: item.contentDetails.videoId }\r\n                })\r\n                console.log(result, 'day ne')\r\n                setCourses(result)\r\n                setTiTle(result[0].title);\r\n                setVid(result[0].vid);\r\n            })\r\n    }, [])\r\n\r\n    const [title, setTiTle] = useState(\"\");\r\n    const [vid, setVid] = useState(\"\");\r\n    const [counter, setCounter] = useState(0);\r\n\r\n    const renderVideo = () => {\r\n        return (\r\n            <div className=\"video-container\">\r\n                <iframe width=\"853\" height=\"480\" src={\"//www.youtube.com/embed/\" + vid + \"?rel=0\"} frameborder=\"0\" allowfullscreen></iframe>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\" >\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    {renderVideo()}\r\n                    <h3> {title}</h3>\r\n                </div>\r\n            </div>\r\n            <ul className=\"collection\">\r\n                <div className=\"row\">\r\n                    {\r\n                        courses.map((item, index) => {\r\n                            return (\r\n                                <div className=\"col-6\">\r\n\r\n                                    <div className=\"video-container\" style={{ marginTop: '30px ' }}>\r\n                                        <iframe width=\"853\" height=\"480\" src={\"//www.youtube.com/embed/\" + item.vid + \"?rel=0\"} frameborder=\"0\" ></iframe>\r\n                                    </div>\r\n                                    <li key={index} href=\"#\" style={{ fontWeight: 'bold' }} className={counter === index ? \"collection-item active\" : \"collection-item\"} style={{ cursor: 'pointer' }} onClick={() => {\r\n                                        setTiTle(item.title);\r\n                                        setVid(item.vid);\r\n                                        setCounter(index)\r\n                                    }}>{item.title}</li>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Course;\r\n\r\n\r\n{/* <h1> {courseName} </h1> */ }\r\n{/* <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    {renderVideo()}\r\n                    <h3> {title}</h3>\r\n                </div>\r\n            </div> */}\r\n{/* <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    {renderVideo()}\r\n                    <h3> {title}</h3>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    {renderVideo()}\r\n                    <h3> {title}</h3>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    {renderVideo()}\r\n                    <h3> {title}</h3>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    {renderVideo()}\r\n                    <h3> {title}</h3>\r\n                </div>\r\n            </div> */}","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport Home from './components/Home.component';\nimport Course from './components/Course.component';\n\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/:coursename\" component={Course} />\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}